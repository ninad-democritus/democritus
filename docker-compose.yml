services:
  nginx:
    image: nginx:1.27-alpine
    ports:
      - "80:80"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend-host
      - file-upload
      - agent-workflow
      - data-pipeline
      - query-service
      - dashboard-service
    restart: unless-stopped

  # MFE Host Application (Shell)
  frontend-host:
    build:
      context: ./frontend
      dockerfile: projects/host-shell/Dockerfile
    ports:
      - "4200:80"
    environment:
      - REMOTE_INGESTION_URL=http://localhost:4201
      - REMOTE_AI_CANVAS_URL=http://localhost:4202

  # MFE Remote: Ingestion Application
  frontend-ingestion:
    build:
      context: ./frontend
      dockerfile: projects/ingestion-app/Dockerfile
    ports:
      - "4201:80"

  # MFE Remote: AI Canvas Application
  frontend-ai-canvas:
    build:
      context: ./frontend
      dockerfile: projects/ai-canvas/Dockerfile
    ports:
      - "4202:80"

  file-upload:
    build:
      context: ./services/file-upload
      dockerfile: Dockerfile
    environment:
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=uploads
      - MINIO_PUBLIC_ENDPOINT=http://localhost
      - SERVICE_HOST=file-upload
      - SERVICE_PORT=8000
    depends_on:
      - minio

  agent-workflow:
    build:
      context: ./services/agent-workflow
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=uploads
      - SERVICE_HOST=agent-workflow
      - SERVICE_PORT=8000
      - DATAHUB_ENABLED=false
      - PREFECT_ENABLED=false
      # LangSmith observability (set your API key)
      - LANGCHAIN_TRACING_V2=true
      - LANGCHAIN_PROJECT=democritus-agents
      - LANGCHAIN_ENDPOINT=https://api.smith.langchain.com
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY:-}
      # Ollama LLM configuration
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_MODEL=llama3.2:3b
    depends_on:
      - redis
      - minio
      - ollama

  agent-worker:
    build:
      context: ./services/agent-workflow
      dockerfile: Dockerfile
    command: ["celery", "-A", "app.main:celery_app", "worker", "-l", "info"]
    environment:
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=uploads
      # LangSmith observability (set your API key)
      - LANGCHAIN_TRACING_V2=true
      - LANGCHAIN_PROJECT=democritus-agents
      - LANGCHAIN_ENDPOINT=https://api.smith.langchain.com
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY:-}
      # Ollama LLM configuration
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_MODEL=llama3.2:3b
    depends_on:
      - redis
      - minio
      - ollama

  data-pipeline:
    build:
      context: ./services/data-pipeline
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PREFECT_API_URL=http://prefect:4200/api
      - SERVICE_HOST=data-pipeline
      - SERVICE_PORT=8000
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - ICEBERG_REST_URI=http://iceberg-rest:8181
      - NESSIE_URI=http://nessie:19120/api/v1
      - AWS_REGION=us-east-1
      # Logging configuration
      - LOG_LEVEL=INFO
      # OpenMetadata configuration
      - OPENMETADATA_HOST=openmetadata-server
      - OPENMETADATA_PORT=8585
      - OPENMETADATA_API_ENDPOINT=http://openmetadata-server:8585/api
      - OPENMETADATA_AUTH_PROVIDER=jwt
      - OPENMETADATA_ADMIN_EMAIL=admin@open-metadata.org
      # JWT Token for ingestion-bot
      - OPENMETADATA_JWT_TOKEN=eyJraWQiOiJHYjM4OWEtOWY3Ni1nZGpzLWE5MmotMDI0MmJrOTQzNTYiLCJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwOi8vb3Blbm1ldGFkYXRhLXNlcnZlcjo4NTg1Iiwic3ViIjoiaW5nZXN0aW9uLWJvdCIsInJvbGVzIjpbIkluZ2VzdGlvbkJvdFJvbGUiXSwiZW1haWwiOiJpbmdlc3Rpb24tYm90QG9wZW4tbWV0YWRhdGEub3JnIiwiaXNCb3QiOnRydWUsInRva2VuVHlwZSI6IkJPVCIsImlhdCI6MTc1OTU5ODA5OSwiZXhwIjpudWxsfQ.EqgdF4opwCRvhoTViOlh_hu4IKtBDbwtUEUHae3Fpdx91EJ_EKfxE-92tRkuSaMWEMPrpgLw-sa96E6FRIJtGkEGE0e6bqDluBuuKMqKGtnnSp_9-uimSUREsTsMPtCUYgVahMCU5G6oLBMoGgmj3SkCPQd9orYtIHXPQsktmVwb91Ia_WqO4MJD-fco2h8qI5EnipjX9luMuKr9JYb7WcmL68RyFRgSKApiZtXS6gOHVFupMN6gZOBwnPoj3rIhPak--gQV72drMxMb1c3CqzwOm1tTxsy4F4FaFcX8ds9HDLCw9CsaV_ADmN23aIRy71LqfDoP3BFT_Qh2Bxedhg
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 300s
    depends_on:
      - minio
      - iceberg-rest
      - nessie
      - openmetadata-server

  # Query Service (New - Natural Language to SQL)
  query-service:
    build:
      context: ./services/query-service
      dockerfile: Dockerfile
    entrypoint: []
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    environment:
      - REDIS_URL=redis://redis:6379/1
      - OPENMETADATA_API_ENDPOINT=http://openmetadata-server:8585/api
      - OPENMETADATA_JWT_TOKEN=eyJraWQiOiJHYjM4OWEtOWY3Ni1nZGpzLWE5MmotMDI0MmJrOTQzNTYiLCJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwOi8vb3Blbm1ldGFkYXRhLXNlcnZlcjo4NTg1Iiwic3ViIjoiaW5nZXN0aW9uLWJvdCIsInJvbGVzIjpbIkluZ2VzdGlvbkJvdFJvbGUiXSwiZW1haWwiOiJpbmdlc3Rpb24tYm90QG9wZW4tbWV0YWRhdGEub3JnIiwiaXNCb3QiOnRydWUsInRva2VuVHlwZSI6IkJPVCIsImlhdCI6MTc1OTU5ODA5OSwiZXhwIjpudWxsfQ.EqgdF4opwCRvhoTViOlh_hu4IKtBDbwtUEUHae3Fpdx91EJ_EKfxE-92tRkuSaMWEMPrpgLw-sa96E6FRIJtGkEGE0e6bqDluBuuKMqKGtnnSp_9-uimSUREsTsMPtCUYgVahMCU5G6oLBMoGgmj3SkCPQd9orYtIHXPQsktmVwb91Ia_WqO4MJD-fco2h8qI5EnipjX9luMuKr9JYb7WcmL68RyFRgSKApiZtXS6gOHVFupMN6gZOBwnPoj3rIhPak--gQV72drMxMb1c3CqzwOm1tTxsy4F4FaFcX8ds9HDLCw9CsaV_ADmN23aIRy71LqfDoP3BFT_Qh2Bxedhg
      - TRINO_HOST=trino
      - TRINO_PORT=8080
      - TRINO_CATALOG=iceberg
      - TRINO_SCHEMA=default
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_NL_MODEL=llama3.2:3b
      - OLLAMA_CHART_MODEL=llama3.2:3b
      - SERVICE_HOST=query-service
      - SERVICE_PORT=8000
      - LANGCHAIN_TRACING_V2=false
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - ollama
      - trino
      - openmetadata-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Query Service Worker (Celery)
  query-service-worker:
    build:
      context: ./services/query-service
      dockerfile: Dockerfile
    command: ["celery", "-A", "app.tasks:celery_app", "worker", "-l", "info"]
    environment:
      - REDIS_URL=redis://redis:6379/1
      - OPENMETADATA_API_ENDPOINT=http://openmetadata-server:8585/api
      - OPENMETADATA_JWT_TOKEN=eyJraWQiOiJHYjM4OWEtOWY3Ni1nZGpzLWE5MmotMDI0MmJrOTQzNTYiLCJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwOi8vb3Blbm1ldGFkYXRhLXNlcnZlcjo4NTg1Iiwic3ViIjoiaW5nZXN0aW9uLWJvdCIsInJvbGVzIjpbIkluZ2VzdGlvbkJvdFJvbGUiXSwiZW1haWwiOiJpbmdlc3Rpb24tYm90QG9wZW4tbWV0YWRhdGEub3JnIiwiaXNCb3QiOnRydWUsInRva2VuVHlwZSI6IkJPVCIsImlhdCI6MTc1OTU5ODA5OSwiZXhwIjpudWxsfQ.EqgdF4opwCRvhoTViOlh_hu4IKtBDbwtUEUHae3Fpdx91EJ_EKfxE-92tRkuSaMWEMPrpgLw-sa96E6FRIJtGkEGE0e6bqDluBuuKMqKGtnnSp_9-uimSUREsTsMPtCUYgVahMCU5G6oLBMoGgmj3SkCPQd9orYtIHXPQsktmVwb91Ia_WqO4MJD-fco2h8qI5EnipjX9luMuKr9JYb7WcmL68RyFRgSKApiZtXS6gOHVFupMN6gZOBwnPoj3rIhPak--gQV72drMxMb1c3CqzwOm1tTxsy4F4FaFcX8ds9HDLCw9CsaV_ADmN23aIRy71LqfDoP3BFT_Qh2Bxedhg
      - TRINO_HOST=trino
      - TRINO_PORT=8080
      - TRINO_CATALOG=iceberg
      - TRINO_SCHEMA=default
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_NL_MODEL=llama3.2:3b
      - OLLAMA_CHART_MODEL=llama3.2:3b
      - LANGCHAIN_TRACING_V2=false
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - ollama
      - trino
      - openmetadata-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.tasks:celery_app inspect ping -d celery@$$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Dashboard Service
  dashboard-service:
    build:
      context: ./services/dashboard-service
      dockerfile: Dockerfile
    environment:
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_USER=openmetadata_user
      - DB_PASSWORD=openmetadata_password
      - DB_NAME=openmetadata_db
      - DB_SCHEMA=dashboards_db
      - QUERY_SERVICE_URL=http://query-service:8000
      - SERVICE_HOST=dashboard-service
      - SERVICE_PORT=8000
      - LOG_LEVEL=INFO
    depends_on:
      - postgresql
      - query-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trino Query Engine
  trino:
    image: trinodb/trino:458
    ports:
      - "8080:8080"
    volumes:
      - ./infra/trino/catalog/iceberg.properties:/etc/trino/catalog/iceberg.properties:ro
      - ./infra/trino/config.properties:/etc/trino/config.properties:ro
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
    depends_on:
      - iceberg-rest
      - minio
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/info"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine

  postgresql:
    container_name: openmetadata_postgresql
    image: docker.getcollate.io/openmetadata/postgresql:1.9.11
    restart: always
    command: "--work_mem=10MB"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    expose:
      - 5432
    ports:
      - "5432:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./infra/postgres/init-openmetadata.sql:/docker-entrypoint-initdb.d/01-init-openmetadata.sql:ro
      - ./infra/postgres/init-dashboards.sql:/docker-entrypoint-initdb.d/02-init-dashboards.sql:ro
    networks:
      - default
    healthcheck:
      test: psql -U postgres -tAc 'select 1' -d openmetadata_db
      interval: 15s
      timeout: 10s
      retries: 10

  minio:
    image: minio/minio:latest
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_API_CORS_ALLOW_ORIGIN=*
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data

  minio-init:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: /bin/sh -c
    command: >
      "mc alias set local http://minio:9000 minioadmin minioadmin &&
       mc mb -p local/uploads || true &&
       mc mb -p local/data || true &&
       mc mb -p local/data/warehouse || true &&
       mc mb -p local/testupload || true &&
       mc mb -p local/testdata || true &&
       mc mb -p local/testdata/warehouse || true &&
       printf '[{"AllowedOrigin":["*"],"AllowedMethod":["GET","PUT","POST","HEAD","DELETE","OPTIONS"],"AllowedHeader":["*"],"ExposeHeader":["ETag"],"MaxAgeSeconds":3000}]' > /tmp/cors.json &&
       mc cors set local/uploads /tmp/cors.json &&
       mc cors set local/data /tmp/cors.json &&
       mc cors set local/testupload /tmp/cors.json &&
       mc cors set local/testdata /tmp/cors.json &&
       mc policy set public local/uploads || true &&
       mc policy set public local/data || true"

  # Apache Iceberg REST Catalog
  iceberg-rest:
    image: tabulario/iceberg-rest:latest
    ports:
      - "8181:8181"
    environment:
      - CATALOG_WAREHOUSE=s3a://data/warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
      - CATALOG_S3_ACCESS__KEY__ID=minioadmin
      - CATALOG_S3_SECRET__ACCESS__KEY=minioadmin
      - CATALOG_S3_PATH__STYLE__ACCESS=true
      - CATALOG_S3_REGION=us-east-1
      - AWS_REGION=us-east-1
    depends_on:
      - minio

  # Nessie Catalog for Iceberg versioning (works on top of Iceberg)
  nessie:
    image: ghcr.io/projectnessie/nessie:0.105.3
    ports:
      - "19120:19120"
    environment:
      - NESSIE_VERSION_STORE_TYPE=IN_MEMORY
      - NESSIE_CATALOG_DEFAULT_WAREHOUSE=s3a://data/warehouse/
      - NESSIE_CATALOG_SERVICE_S3_ENDPOINT=http://minio:9000
      - NESSIE_CATALOG_SERVICE_S3_ACCESS_KEY_ID=minioadmin
      - NESSIE_CATALOG_SERVICE_S3_SECRET_ACCESS_KEY=minioadmin
      - NESSIE_CATALOG_SERVICE_S3_PATH_STYLE_ACCESS=true
    depends_on:
      - minio
      - iceberg-rest

  # Local LLM runtime
  ollama:
    image: ollama/ollama:latest
    volumes:
      - ollama:/root/.ollama
    ports:
      - "11434:11434"
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Ollama Model Loader (Init Container)
  ollama-init:
    image: ollama/ollama:latest
    depends_on:
      ollama:
        condition: service_healthy
    entrypoint: /bin/sh -c
    command: >
      "sleep 10 &&
       ollama pull llama3.2:3b &&
       echo 'Models downloaded successfully'"
    environment:
      - OLLAMA_HOST=http://ollama:11434
    restart: "no"

  # OpenMetadata Migration Container (must run first)
  execute-migrate-all:
    container_name: execute_migrate_all
    image: docker.getcollate.io/openmetadata/server:1.9.11
    command: "./bootstrap/openmetadata-ops.sh migrate"
    environment:
      # Database configuration using PostgreSQL
      - DB_DRIVER_CLASS=org.postgresql.Driver
      - DB_SCHEME=postgresql
      - DB_USE_SSL=false
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_USER=openmetadata_user
      - DB_PASSWORD=openmetadata_password
      - DB_DATABASE=openmetadata_db
      # Elasticsearch configuration
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_SCHEME=http
      - ELASTICSEARCH_USERNAME=""
      - ELASTICSEARCH_PASSWORD=""
      # Migration settings
      - MIGRATION_LIMIT_PARAM=1200
      - LOG_LEVEL=INFO
      # Basic auth configuration according to documentation
      - AUTHORIZER_CLASS_NAME=org.openmetadata.service.security.DefaultAuthorizer
      - AUTHORIZER_REQUEST_FILTER=org.openmetadata.service.security.JwtFilter
      - AUTHORIZER_ADMIN_PRINCIPALS=[admin]
      - AUTHORIZER_INGESTION_PRINCIPALS=[ingestion-bot]
      - AUTHORIZER_PRINCIPAL_DOMAIN="open-metadata.org"
      - AUTHENTICATION_PROVIDER=basic
      - AUTHENTICATION_PUBLIC_KEYS=[http://openmetadata-server:8585/api/v1/system/config/jwks]
      - AUTHENTICATION_AUTHORITY=http://openmetadata-server:8585
      - AUTHENTICATION_CLIENT_ID=""
      - AUTHENTICATION_CALLBACK_URL=""
      # JWT Token Configuration for ingestion-bot (using default keys for testing)
      - JWT_ISSUER=http://openmetadata-server:8585
      - JWT_KEY_ID=Gb389a-9f76-gdjs-a92j-0242bk94356
    depends_on:
      postgresql:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # OpenMetadata Server (runs after migration)
  openmetadata-server:
    container_name: openmetadata_server
    image: docker.getcollate.io/openmetadata/server:1.9.11
    ports:
      - "8585:8585"
      - "8586:8586"
    environment:
      # Database configuration using PostgreSQL
      - DB_DRIVER_CLASS=org.postgresql.Driver
      - DB_SCHEME=postgresql
      - DB_USE_SSL=false
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_USER=openmetadata_user
      - DB_PASSWORD=openmetadata_password
      - DB_DATABASE=openmetadata_db
      # Elasticsearch configuration
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_SCHEME=http
      - ELASTICSEARCH_USERNAME=""
      - ELASTICSEARCH_PASSWORD=""
      # Server configuration
      - SERVER_HOST_API_URL=http://openmetadata-server:8585/api
      - SERVER_WEB_URL=http://localhost:8585
      - LOG_LEVEL=INFO
      # Basic auth configuration according to documentation
      - AUTHORIZER_CLASS_NAME=org.openmetadata.service.security.DefaultAuthorizer
      - AUTHORIZER_REQUEST_FILTER=org.openmetadata.service.security.JwtFilter
      - AUTHORIZER_ADMIN_PRINCIPALS=[admin]
      - AUTHORIZER_INGESTION_PRINCIPALS=[ingestion-bot]
      - AUTHORIZER_PRINCIPAL_DOMAIN="open-metadata.org"
      - AUTHENTICATION_PROVIDER=basic
      - AUTHENTICATION_PUBLIC_KEYS=[http://openmetadata-server:8585/api/v1/system/config/jwks]
      - AUTHENTICATION_AUTHORITY=http://openmetadata-server:8585
      - AUTHENTICATION_CLIENT_ID=""
      - AUTHENTICATION_CALLBACK_URL=""
      # JWT Token Configuration for ingestion-bot (using default keys for testing)
      - JWT_ISSUER=http://openmetadata-server:8585
      - JWT_KEY_ID=Gb389a-9f76-gdjs-a92j-0242bk94356
    depends_on:
      postgresql:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      execute-migrate-all:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8586/healthcheck"]
      interval: 15s
      timeout: 10s
      retries: 10

  # Elasticsearch for OpenMetadata search
  elasticsearch:
    container_name: openmetadata_elasticsearch  
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.4
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1024m -Xmx1024m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: "curl -s http://localhost:9200/_cluster/health?pretty | grep status | grep -qE 'green|yellow' || exit 1"
      interval: 15s
      timeout: 10s
      retries: 10

  # Removed standalone Airflow - workflow logic integrated into data-pipeline service


  # Optional local LLM runtime (comment out if using external API)
  # (already enabled above)

volumes:
  postgresql_data:
  miniodata:
  ollama:
  elasticsearch_data:


