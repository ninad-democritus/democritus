worker_processes  1;

events { worker_connections 1024; }

http {
  include       mime.types;
  default_type  application/octet-stream;
  sendfile        on;
  keepalive_timeout  65;
  
  # DNS resolver for dynamic upstream resolution
  resolver 127.0.0.11 valid=10s;
  
  # Support for large file uploads (100MB)
  client_max_body_size 100M;
  client_body_timeout 300s;
  client_header_timeout 300s;
  proxy_connect_timeout 300s;
  proxy_send_timeout 300s;
  proxy_read_timeout 300s;

  upstream frontend {
    server frontend:80;
  }

  upstream file_upload {
    server file-upload:8000;
  }

  upstream agent_workflow {
    server agent-workflow:8000;
  }

  upstream data_pipeline {
    server data-pipeline:8000 max_fails=3 fail_timeout=30s;
    keepalive 32;
  }

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  server {
    listen 80;

    # Health check endpoint
    location /health {
      access_log off;
      return 200 "healthy\n";
      add_header Content-Type text/plain;
    }

    # Frontend
    location / {
      proxy_pass http://frontend;
      proxy_set_header Host $host;
    }

    # REST APIs
    location /v1/files {
      proxy_pass http://file_upload;
      proxy_set_header Host $host;
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "*" always;
      if ($request_method = OPTIONS) {
        return 204;
      }
    }
    
    # Proxy MinIO uploads directly to avoid CORS issues
    location /uploads/ {
      proxy_pass http://minio:9000/uploads/;
      proxy_set_header Host minio:9000;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      add_header Access-Control-Allow-Origin "*" always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "*" always;
      add_header Access-Control-Expose-Headers "ETag" always;
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "*";
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 200;
      }
    }
    location /v1/workflows {
      proxy_pass http://agent_workflow;
      proxy_set_header Host $host;
    }
    location /v1/pipelines {
      proxy_pass http://data_pipeline;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 300s;
      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
      proxy_next_upstream_tries 3;
      proxy_next_upstream_timeout 30s;
    }

    # WebSocket for workflows
    location /ws/v1/workflows/ {
      proxy_pass http://agent_workflow;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $host;
    }

    # WebSocket for data pipeline status updates with run-specific URLs
    location ~ ^/ws/v1/pipelines/status/(.+)$ {
      proxy_pass http://data_pipeline/ws/v1/pipelines/status/$1;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
  }
}


